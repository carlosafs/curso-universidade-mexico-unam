print (i)
}
minhas_letras <- c("a", "b", "c", "d")
for (letras in minhas_letras){
print(letras)
}
for (i in seq_along(minhas_letras)){
print(minhas_letras[i])
}
for (i in 1:length(minhas_letras)){
print(minhas_letras[i])
}
x <- seq (from = 1, to = 100, by = 0.5)
for (i in x){
print(i)
}
for (i in seq_len(nrow(x))){
for (j in seq_len(ncol(x)))
print (x[i,j])
}
}
x <- matrix (seq (1, 18, 2), 2), 3, 3)
for (i in seq_len(nrow(x))){
for (j in seq_len(ncol(x)))
print (x[i,j])
}
}
x <- matrix (seq (1, 18, 2), 3, 3)
for (i in seq_len(nrow(x))){
for (j in seq_len(ncol(x)))
print (x[i,j])
}
}
x <- matrix (seq (1, 18, 2), 3, 3)
for (i in seq_len(nrow(x))){
for (j in seq_len(ncol(x))){
print (x[i,j])
}
}
var <- 0
for(i in 1:10){
for(j in 1:5){
var <- var + j
}
}
j
var
while(contador < 10){
print(contador)
contador <- contador + 2
}
contador <- 0
contador <- 0
while(contador < 10){
print(contador)
contador <- contador + 2
}
a <- 5
while(a >= 3 && a <= 10){
print(a)
moeda <- rbinom(1, 1, 0.5)
if(moeda = 1){
a <- a + 1
} else {
a <- a - 1
}
}
a <- 5
while(a >= 3 && a <= 10){
print(a)
moeda <- rbinom(1, 1, 0.5)
if(moeda == 1){
a <- a + 1
} else {
a <- a - 1
}
}
for(i in 1:100){
if(i < 20){
next
}
print(i)
}
moedas <- rbinom(100, 1, 0.5)
moedas
mean(moedas)
mean(x = moedas)
mean(x = moedas, na.rm = FALSE)
mean(na.rm = FALSE, x = moedas)
library(askpass)
minha_funcao <- function(x, y, operacao = "soma"){
if (operacao == "soma"){
return(x + y)
}
if (operacao == "subtracao"){
return(x - y)
}
if (operacao == "multiplicacao"){
return(x * y)
}
if (operacao == "divisao"){
return(x / y)
}
}
minha_funcao(2, 2)
minha_funcao(2, 2, "soma")
minha_funcao(2, 2, "subtracao")
minha_funcao(2, 2, "multiplicacao")
minha_funcao(2, 2, "divisao")
maiores <- function(x, limite){
#indices eh um vetor logico
indices <- x > limite
x[indices]
}
a <- 1:50
maiores(a, 25)
library("swirl")
select_language()
library("swirl")
select_language()
swirl ()
c(1, 03, 2016)
sucesor <- function(x) {
x + 1
}
submit()
sucesor <- function(x) {
x + 1
}
submit()
sucesor <- function(x) {
return (x + 1)
}
submit()
sucesor <- function(x) {
return (x + 1)
}
submit()
sucesor <- function(x) {
return (x + 1)
}
sucesor <- funcion(x) x + 1
submit()
sucesor(1)
submit()
sucesor <- function(x)
sucesor <- function(x){}
sucesor <- function(x) {
x + 1
}
submit()
sucesor <- function(x) {
return(x + 1)
}
submit()
sucesor <- function(x){ resturn (x + 1)}
submit()
sucesor <- function (x) {return (x +1)}
submit ()
sucesor <- funcion(x) {}
sucesor <- funcion (x){
sucesor <- function(x) {
return(x + 1)
}
submit()
sucesor <- function(x) {
(x + 1)
}
submit()
sucesor <- function(x) {
x + 1
}
submit()
sucesor <- function(x) {
return(x + 1)
}
submit()
submit()
sucesor <- function(x) {+ x + 1
}
sucesor <- function(x){
x+1
}
submit()
sucesor <- function(x){
return (x + 1)
}
submit()
sucesor <- function("x") {
return(x + 1)
}
sucessor <- function(x){
return (x + 1)
}
submit()
sucessor <- function(x){
x + 1
}
submit()
sucesor <- function(x){}
submit()
sucesor <- function(x){
x + 1
}
submit()
sucesor <- function(x){
y = x + 1
return(y)
}
submit()
sucesor <- function(x) {
return(x + 1)
}
submit()
sucesor <- function(x) {
x + 1
}
submit()
sucesor <- function(x) {
return(x + 1)
}
submit()
sucesor <- function(x) {
return(x + 1)
}
submit()
sucesor(5)
sucesor
diferencia_cuadrada <- function(x, y = 2) {
qua = ((x^2)-(y^2))
return (qua)
}
submit()
diferencia_cuadrada(3)
diferencia_cuadrada(10, 5)
diferencia_cuadrada(y = 10, x = 5)
numeros_por_vocales <- function(...){
tolower(...)
chartr("aeio", "4310", ...)
return (...)
}
submit()
numeros_por_vocales <- function(...){
a <- tolower(...)
chartr("aeio", "4310", "a")
return (a)
}
submit()
numeros_por_vocales <- function(...){
a <- tolower(...)
chartr("aeio", "4310", a)
return (a)
}
submit()
numeros_por_vocales <- function(...){
a <- tolower ()
chartr("aeio", "4310", a)
return (a)
}
submit()
numeros_por_vocales <- function(...){
a <- tolower(...)
chartr("aeio", "4310", a)
return (a)
}
submit()
numeros_por_vocales <- function(...){
a <- chartr("aeio", "4310", tolower (...))
return (a)
}
submit()
numeros_por_vocales <- function(...){
return (chartr("aeio", "4310", tolower (...)))
}
submit()
numeros_por_vocales <- function(...){
chartr("aeio", "4310", tolower (...))
}
submit()
numeros_por_vocales <- function(...){
a <- tolower(...)
chartr("aeio", "4310", a)
}
submit()
numeros_por_vocales <- function(...){
a <- paste (...)
b <- tolower(a)
chartr("aeio", "4310", b)
}
submit()
numeros_por_vocales("aeio")
mean(args())
args(mean())
args(mean)
operador_binario <- function(fun, a, b){
fun (a, b)
}
submit()
operador_binario('%/%', 7, 3)
operador_binario(`%/%`, 7, 3)
library("swirl")
select_language()
swirl ()
help("apply")
mi_matriz <- matrix(data = 1:16, nrow=4, ncol = 4)
mi_matriz
apply(X=mi_matriz, MARGIN = 2, FUN = min)
apply(X=mi_matriz, MARGIN = 1, FUN = min)
mi_lista <- list ("Introducción", "a", "la", "Programación", "Estadística", "con", "R")
mi_lista
lapply()
lapply
help(apply)
formals(lapply)
mayusculas <- lapply(mi_lista, toupper)
mayusculas
class(mayusculas)
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
swirl()
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).CSV")
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv")
View(asa_datos)
lapply(asa_datos, class)
asa_datos$Descripcion
unique(asa_datos$Descripcion)
unique(asa_datos$Estado)
sum(asa_datos$Pasajeros.nacionales)
asa_pasajeros <- asa_datos[,c("Pasajeros.nacionales", "Pasajeros.internacionales")]
View(asa_pasajeros)
lapply(asa_pasajeros, sum)
total_pasajeros <- sapply (asa_pasajeros, sum)
total_pasajeros
table(asa_datos$Estado)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, sum)
View(asa_datos)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, sum/12)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Codigo.IATA, mean)
library("swirl")
select_language()
swirl ()
demo(graphics)
plot(1:5)
plot(c(1, 2, 3), c(4, 5, 6))
?plot
plot(c(1, 2, 3), c(4, 5, 6), type="l")
plot(6:10, type = "s")
plot(1:10, type = "o")
plot(c(6:10), c(1:10), type = "s")
plot(c(6:10), c(1:10), type = "o")
plot(1:10, type = "o")
info()
plot(1:10, type = "b")
plot(1:5, main="Mi gráfica")
plot(1:5, main="Mi gráfica", xlab = "x", ylab = "y")
points(c(1, 5), c(4, 2), col="green")
lines(c(1, 4), c(2, 5), col="yellow")
abline(h=3,col="red",lty=2)
abline(h=1:5,v=1:5, col="purple")
data("iris")
force(iris)
class(iris)
head(iris)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width)
hist(iris$Petal.Length, col="red")
hist(iris$Petal.Length, col="red", freq=FALSE)
hist(iris$Petal.Length, col="red", breaks=5)
?boxplot
boxplot(Sepal.Width ~ Species, data=iris, col=2:4)
pie(c(50, 50, 50), labels=levels(iris$Species))
?par
par()
par_orig <- par()
par("col")
par(col="blue")
iris
data("iris")
plot(iris)
par(col)
par("col")
plot(iris,
| col=iris$Species)
plot(iris, col=iris$Species)
tapply(iris)
apply(X, MARGIn= 1, iris)
apply(X, MARGIN= 1, iris)
View(iris)
info()
col(iris)
help(iris)
head (iris)
header (iris)
colnames(iris)
data(iris)
info()
skip()
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
par(pch=15)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch="A")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(1:26, pch=0:25)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = 21, bg = "blue")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, cex = 2)
legend(x = 4.5, y = 7, legend = levels(iris$Species), col = c(1:3), pch = 16)
par(par_orig)
colors()
help(grep)
grep("yellow", colors(), value=TRUE)
grep (color)
colors()
info()
skip()
palette()
plot(1:8, col=1:8, main="Colores por índice", pch=17, cex=3)
plot(1:12, col=1:12, main="Colores reciclados", pch=18, cex=3)
paleta_arcoiris <- rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette
pallete()
palette()
plot(1:10, col=1:10, main="Paleta Arcoiris",pch=17, cex=3)
paleta_calida <- heat.colors(10)
palette(paleta_calida)
plot(1:10, col=1:10, main="Paleta Cálida",pch=17, cex=3)
mi_paleta <- c(col = "red"", col = "green", "#0019FFFF")
mi_paleta <- c(col = red, col = green, #0019FFFF)
mi_paleta <- c(col = "red", col = "green", "#0019FFFF")
mi_paleta <- c(col = "red, col = "green", "#0019FFFF")
mi_paleta <- c(col = red, col = green, #0019FFFF)
mi_paleta <- c(col = red, col = green, #0019FFFF)
mi_paleta <- c(col = red, col = green, #0019FFFF)
mi_paleta <- c("red", "gren", "#0019FFFF")
mi_paleta <- c("red", "green", "#0019FFFF")
plot(1:10, col=mi_paleta, main="Mi Paleta",pch=17, cex=3)
palette(mi_paleta)
plot(1:10, col=1:10, main="Mi Paleta",pch=17, cex=3)
palette ("default")
swirl()
swirl()
par( mar = c(4, 4, 2, 0, 1))
plot(rnorm(100), rnorm(100)),
xlab = expression(hat(mu)[0]),
ylab = expression(alpha^beta),
main = expression(paste("Gráfica "),
alpha^beta,
" vs ", hat(mu)[0])))
par( mar = c(4, 4, 2, 0, 1))
plot(rnorm(100), rnorm(100)),
+  xlab = expression(hat(mu)[0]),
+  ylab = expression(alpha^beta),
+  main = expression(paste("Gráfica "),
+                          alpha^beta,
+                          " vs ", hat(mu)[0])))
library("swirl")
select_language()
swirl ()
plot(1:20, type="n")
text(5, 5, "¡Hola Mundo!")
help(text)
text(11, 11, "¡Hola Mundo! x2", cex=2)
text(7, 7, "¡Hola Mundo con Serif!", family="serif")
text(9, 9, "¡Hola Mundo con Mono!", family="mono")
text(13, 13, "¡Hola Mundo con Sans!", family="sans")
demo(plotmath)
swirl()
demo(plotmath)
plot(1:10, type="n", main=expression(alpha + beta))
plot(1:10, type="n", xlab =
| expression(paste("Valores de ", x^phi1)))
plot(1:10, type="n", xlab = expression(paste("Valores de ", x^phi1)))
?plotmath
t <- 10
plot(1:t, main=substitute(paste("La gráfica del vector 1:", x), list(x=t)))
t <- 20
plot(1:t, main=substitute(paste("La gráfica del vector 1:", x), list(x=t)))
?substitute
install.packages("rgl")
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x, y)
open3d()
library(rgl)
open3d()
plot3d(x, y, z, col = rainbow(1000), type = "p")
library("swirl")
select_language()
swirl ()
iris
data(iris)
head(iris)
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
?rgl
open3d()
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s")
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s", col= rainbow(150))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s", col=as.integer(iris$Species))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s", col=as.integer(iris$Species), radius=1.5)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab = "Petal.Length", zlab = "Sepal.Width")
help(plot3d)
